#!/usr/bin/env bash

set -e

script_name="$(basename "$0")"

usage() {
	printf "%s [-s -r -c] [snap_src_path] [snap_dest_path] [snap_export_path]\n" "${script_name}"
}

if [[ $# -gt 5 || $# -lt 3 ]]; then
	usage

	exit 1
fi

current_date="$(date -I)"
# Path to back up the system root to.
system_backup_path=
# Number of snapshot to keep.
# TODO: Make configurable and use dates.
snaps_to_keep=7

parse_args() {
	while :; do
		case $1 in
			-h|--help)
				usage
				exit
				;;
			-s|--system)
				if [ "$2" ]; then
					system_backup_path="$2"
					shift
				else
					printf '--system requires a non-empty option argument\n'
				fi

				system_backup "${system_backup_path}"
				;;
			-r|--restore-system)
				exit
				;;
			-c|--check)
				check_disks
				exit
				;;
			--)
				shift
				break
				;;
			-?*)
				printf 'Unknown option %s\n' "$1"
				exit 1
				;;
			*)
				break
		esac

		shift
	done

	# Source path used to create a snapshot of.
	snap_src_path="$1"
	# Destination path that the newly created snapshot will be stored.
	snap_dest_path="$2"
	# Destination path that the newly created snapshot will be sent to.
	snap_export_path="$3"
}


# Backs up the system root to a specified destination.
system_backup() {
	local dest="$1"

	[[ -d "${dest}" ]] || mkdir "${dest}"

	# --xattrs gives me shit
	rsync --archive --acls --exclude={"/dev/*","/proc/*","/sys/*","/tmp/*","/run/*","/mnt/*","/media/*","/lost+found","/var/tmp/*","/var/cache/*","/home/*/.cache/*"} --delete / "${dest}"
}

# TODO: Implement
# Restores a backed up system root to a new root.
system_restore() {
	:
}

# Runs utilities to check the health of all disks on the system.
# TODO: Implement
check_disks() {
	:
}

# Create a new snapshot of the specified snap_src_path.
create_snap() {
	btrfs subvolume snapshot -r "${snap_src_path}" "${snap_dest_path}/${current_date}"
	sync
}

# Export the difference between the newly created snapshot and the previous one
# to an external disk.
export_snap_diff() {
	local snaps=(${snap_dest_path}/*)
	local prev_snap_dest="${snaps[-2]}"
	
	btrfs send -p "${prev_snap_dest}" "${snap_dest_path}/${current_date}" | btrfs receive "${snap_export_path}"
}

# Delete the excess snapshots.
clean_snaps() {
	local snaps=(${snap_dest_path}/*)
	local exported_snaps=(${snap_export_path}/*)
	local num_snaps=${#snaps[@]}
	local num_exported_snaps=${#exported_snaps[@]}

	if [[ ${num_snaps} != "${num_exported_snaps}" ]]; then
		return 1
	fi

	if [[ ${num_snaps} -gt ${snaps_to_keep} ]]; then
		local snaps_to_delete=$((num_snaps - snaps_to_keep))

		btrfs subvolume delete "${snaps[@]::${snaps_to_delete}}"
	fi

	if [[ ${num_exported_snaps} -gt ${snaps_to_keep} ]]; then
		local snaps_to_delete=$((num_exported_snaps - snaps_to_keep))

		btrfs subvolume delete "${exported_snaps[@]::${snaps_to_delete}}"
	fi
}

parse_args "$@"

create_snap
export_snap_diff
clean_snaps

exit 0
